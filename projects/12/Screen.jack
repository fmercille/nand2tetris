// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static Array framebuffer;
    static boolean color;
    static Array powerOfTwo;
    static Array leftEnd, rightEnd; // For the ends of horizontal lines

    /** Initializes the Screen. */
    function void init() {
      let color = true;
      let framebuffer = 16384;

      let powerOfTwo = Array.new(16);
      let powerOfTwo[0] = 1;
      let powerOfTwo[1] = 2;
      let powerOfTwo[2] = 4;
      let powerOfTwo[3] = 8;
      let powerOfTwo[4] = 16;
      let powerOfTwo[5] = 32;
      let powerOfTwo[6] = 64;
      let powerOfTwo[7] = 128;
      let powerOfTwo[8] = 256;
      let powerOfTwo[9] = 512;
      let powerOfTwo[10] = 1024;
      let powerOfTwo[11] = 2048;
      let powerOfTwo[12] = 4096;
      let powerOfTwo[13] = 8192;
      let powerOfTwo[14] = 16384;
      let powerOfTwo[15] = (32767 + 1);

      let leftEnd = Array.new(16);
      let leftEnd[0] = -1;
      let leftEnd[1] = -2;
      let leftEnd[2] = -4;
      let leftEnd[3] = -8;
      let leftEnd[4] = -16;
      let leftEnd[5] = -32;
      let leftEnd[6] = -64;
      let leftEnd[7] = -128;
      let leftEnd[8] = -256;
      let leftEnd[9] = -512;
      let leftEnd[10] = -1024;
      let leftEnd[11] = -2048;
      let leftEnd[12] = -4096;
      let leftEnd[13] = -8192;
      let leftEnd[14] = -16384;
      let leftEnd[15] = -32767 - 1;

      let rightEnd = Array.new(16);
      let rightEnd[0] = 0;
      let rightEnd[1] = 1;
      let rightEnd[2] = 3;
      let rightEnd[3] = 7;
      let rightEnd[4] = 15;
      let rightEnd[5] = 31;
      let rightEnd[6] = 63;
      let rightEnd[7] = 127;
      let rightEnd[8] = 255;
      let rightEnd[9] = 511;
      let rightEnd[10] = 1023;
      let rightEnd[11] = 2047;
      let rightEnd[12] = 4095;
      let rightEnd[13] = 8191;
      let rightEnd[14] = 16383;
      let rightEnd[15] = 32767;

      return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
      // 512 columns (32 words), 256 lines = 8192 words total
      var int x, framebufferEnd;
      let x = framebuffer;
      let framebufferEnd = framebuffer + 8192 + 1;
      
      while (x < framebufferEnd) {
        do Memory.poke(x, 0);
        let x = x + 1;
      }

      return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
      let color = b;
      return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {

      var int address;
      var int xOver16;
      var int remainder;

      let xOver16 = x / 16;
      let remainder = x - (xOver16 * 16);
      let address = 32 * y + (x / 16) + framebuffer;

      if (color) {
        do Memory.poke(address, Memory.peek(address) | powerOfTwo[remainder]);
      } else {
        do Memory.poke(address, Memory.peek(address) & ~powerOfTwo[remainder]);
      }

      return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {

      var int a, b, diff;
      var int leftEndAddress, rightEndAddress;
      var int leftEndRemainder, rightEndRemainder;
      var int x1Over16, x2Over16;
      var int dx, dy;
      var boolean continue;

      // We always draw from left to right. We swap the points if it's the other way around.
      if (x1 > x2) {
        let a = x1; let x1 = x2; let x2 = a; // Swap X
        let a = y1; let y1 = y2; let y2 = a; // Swap Y
      }

      if (y1 = y2) { // Horizontal line
        let x1Over16 = x1 / 16;
        let x2Over16 = x2 / 16;
        let leftEndAddress = (32 * y1 + x1Over16) + framebuffer;
        let rightEndAddress = (32 * y2 + x2Over16) + framebuffer;
        let leftEndRemainder = x1 - (x1Over16 * 16);
        let rightEndRemainder = x2 - (x2Over16 * 16);

        if (leftEndAddress = rightEndAddress) {
          let a = leftEndRemainder;

          while (a < (rightEndRemainder + 1)) {
            if (color) {
              do Memory.poke(leftEndAddress, Memory.peek(leftEndAddress) | powerOfTwo[a]);
            } else {
              do Memory.poke(leftEndAddress, Memory.peek(leftEndAddress) & ~powerOfTwo[a]);
            }

            let a = a + 1;
          }
        } else {
          if (color) {
            do Memory.poke(leftEndAddress, Memory.peek(leftEndAddress) | leftEnd[leftEndRemainder]);
            do Memory.poke(rightEndAddress, Memory.peek(rightEndAddress) | rightEnd[rightEndRemainder]);
          } else {
            do Memory.poke(leftEndAddress, Memory.peek(leftEndAddress) & ~leftEnd[leftEndRemainder]);
            do Memory.poke(rightEndAddress, Memory.peek(rightEndAddress) & ~rightEnd[rightEndRemainder]);
          }

          let a = leftEndAddress+1;
          while (a < rightEndAddress) {
            if (color) {
              do Memory.poke(a, -1);
            } else {
              do Memory.poke(a, 0);
            }

            let a = a + 1;
          }
        }
      } else {
        if (x1 = x2) { // Vertical line
          let x1Over16 = x1 / 16;
          if (y1 > y2) { let a = y1; let y1 = y2; let y2 = a; }
          let a = (y1 * 32 + x1Over16) + framebuffer;
          let b = (y2 * 32 + x1Over16 + 1) + framebuffer;
          let leftEndRemainder = x1 - (x1Over16 * 16);

          while (a < b) {
            if (color) {
              do Memory.poke(a, Memory.peek(a) | powerOfTwo[leftEndRemainder]);
            } else {
              do Memory.poke(a, Memory.peek(a) & ~powerOfTwo[leftEndRemainder]);
            }
            let a = a + 32;
          }
        } else { // Diagonal line
          let dx = x2 - x1;
          let a = 0;
          let b = 0;
          let diff = 0;
          let continue = true;

          if (y1 < y2) {
            let dy = y2 - y1;

            while (continue) {
              do Screen.drawPixel(x1 + a, y1 + b);

              if (diff < 0) {
                let a = a + 1;
                let diff = diff + dy;
              } else {
                let b = b + 1;
                let diff = diff - dx;
              }

              let continue = ~((a > dx) | (b > dy));
            }
            
          } else {
            let dy = y1 - y2;

            while (continue) {
              do Screen.drawPixel(x1 + a, y1 + b);

              if (diff > 0) {
                let a = a + 1;
                let diff = diff - dy;
              } else {
                let b = b - 1;
                let diff = diff + dx;
              }

              let continue = ~((a > dx) | (b > dy));
            }
          }
        }
      }

      return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
      var int y;

      if (y2 < y1) { let y = y1; let y1 = y2; let y2 = y; }
      let y = y1;

      while (y < (y2+1)) {
        do Screen.drawLine(x1, y, x2, y);
        let y = y + 1;
      }

      return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
      var int dy, tmp;

      let dy = 1;

      do Screen.drawLine(x-r, y, x+r, y);

      while (dy < (r+1)) {
        let tmp = Math.sqrt((r*r) - (dy*dy));

        do Screen.drawLine(x - tmp, y + dy, x + tmp, y + dy);
        do Screen.drawLine(x - tmp, y - dy, x + tmp, y - dy);

        let dy = dy + 1;
      }

      return;
    }
}
