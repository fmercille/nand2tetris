// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Keyboard.jack

/**
 * A library for handling user input from the keyboard.
 */
class Keyboard {
    static int keyboard;

    /** Initializes the keyboard. */
    function void init() {
      let keyboard = 24576;
      return;
    } 

    /**
     * Returns the character of the currently pressed key on the keyboard;
     * if no key is currently pressed, returns 0.
     *
     * Recognizes all ASCII characters, as well as the following keys:
     * new line = 128 = String.newline()
     * backSpace = 129 = String.backspace()
     * left arrow = 130
     * up arrow = 131
     * right arrow = 132
     * down arrow = 133
     * home = 134
     * End = 135
     * page up = 136
     * page down = 137
     * insert = 138
     * delete = 139
     * ESC = 140
     * F1 - F12 = 141 - 152
     */

    function char keyPressed() {
      return Memory.peek(keyboard);
    }

    /**								
     * Waits until a key is pressed on the keyboard and released,
     * then echoes the key to the screen, and returns the character 
     * of the pressed key.
     */
    function char readChar() {
      var char key;

      do Output.printChar(0);
      do Output.backSpace();

      while (Memory.peek(keyboard) = 0) { }

      let key = Memory.peek(keyboard);

      while (Memory.peek(keyboard) = key) { }

      do Output.printChar(key);

      return key;
    }

    /**								
     * Displays the message on the screen, reads from the keyboard the entered
     * text until a newline character is detected, echoes the text to the screen,
     * and returns its value. Also handles user backSpaces.
     */
    function String readLine(String message) {
      var String line;
      var char c;
      var boolean notFinished;

      do Output.printString(message);

      let notFinished = true;
      let line = String.new(256);

      while (notFinished) {
        let c = Keyboard.readChar();

        if (c = 128) { // Newline
          let notFinished = false;
        } else {
          if (c = 129) { // backSpace
            if (line.length() > 0) {
              do line.eraseLastChar();
            }
          } else {
            do line.appendChar(c);
          }
        }
      }
      
      return line;
    }   

    /**								
     * Displays the message on the screen, reads from the keyboard the entered
     * text until a newline character is detected, echoes the text to the screen,
     * and returns its integer value (until the first non-digit character in the
     * entered text is detected). Also handles user backSpaces. 
     */
    function int readInt(String message) {
      var String line;
      var int lineLength;
      var int value;
      var int numDigits;
      var Array digits;
      var int i, powerOfTen, tmp;
      var char c;
      var boolean negative;

      let line = Keyboard.readLine(message);
      let lineLength = line.length();
      let numDigits = 0;
      let value = 0;
      let i = 0;
      let tmp = 0;
      let negative = (line.charAt(0) = 45);
      let digits = Array.new(lineLength);

      if (negative) {
        let i = 1;
      }

      while (i < lineLength) {
        let c = line.charAt(i);

        if ((c > 47) & (c < 58)) { // Is a digit
          let digits[tmp] = c-48;
          let numDigits = tmp+1;
        } else { // First non-digit
          let i = lineLength; // To break out of the loop
        }

        let i = i + 1;
        let tmp = tmp + 1;
      }

      let i = 0;
      let powerOfTen = 1;

      while (i < numDigits) {
        let value = value + (digits[ (numDigits-1) - i ] * powerOfTen);
        let powerOfTen = powerOfTen * 10;
        let i = i + 1;
      }

      if (negative) {
        let value = -value;
      }

      return value;
    }
}
