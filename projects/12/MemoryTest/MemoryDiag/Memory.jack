// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array ram;
    static Array heap;
    static int freeList;

    /** Initializes the class. */
    function void init() {
      let ram = 0;
      let heap = 2048;
      let freeList = 2048;
      let heap[0] = 0; // Next
      let heap[1] = 14333; // Size
      return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
      return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
      let ram[address] = value;
      return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
      var Array segment;
      var Array bestFit;
      var Array tmp;

      // First look for a segment with the proper size
      let segment = freeList;
      let bestFit = 0;

      while ( ~(segment = 0) ) {
        if ( (segment[1] > (size-1)) ) { // We only process segments that are at least big enough
          if ( bestFit = 0 ) {
            let bestFit = segment;
          } else {
            if ( segment[1] < bestFit[1] ) { // We found a better fit
              let bestFit = segment;
            }
          }
        }

        let segment = segment[0]; // Next
      }

      if ( bestFit[1] < (size+1) ) { // We have an exact fit
        // We move the previous segment's next pointer to the bestFit's next pointer
        if ( freeList = bestFit ) {
          let freeList = bestFit[0];
          let bestFit[0] = 0;
          let segment = bestFit;
        } else {
          let tmp = freeList;

          while ( ~(tmp[0] = bestFit) ) {
            let tmp = tmp[0];
          }

          let tmp[0] = bestFit[0];
          let bestFit[0] = 0;
          let segment = bestFit;
        }
      } else { // We need to fragment a segment
        let tmp = (bestFit + bestFit[1] + 2) - ( size + 2 );
        let tmp[0] = 0;
        let tmp[1] = size;
        let bestFit[1] = (tmp - bestFit) - 2;
        let segment = tmp;
      }

      return segment+2;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
      var Array tmp;

      let o[-2] = 0;
      let tmp = freeList;

      while ( ~(tmp[0] = 0) ) {
        let tmp = tmp[0];
      }

      let tmp[0] = o-2;
      return;
    }    
}
