function Obstacle.new 0
push constant 2
call Memory.alloc 1
pop pointer 0
push constant 30000
pop this 1
push argument 0
call Wall.getWall 1
pop this 0
push pointer 0
return
function Obstacle.getY 0
push argument 0
pop pointer 0
push this 1
return
function Obstacle.reset 0
push argument 0
pop pointer 0
push constant 30000
pop this 1
push constant 0
return
function Obstacle.collides 0
push argument 0
pop pointer 0
push this 1
push argument 1
call Runner.getY 1
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
return
label IF_FALSE0
push this 1
push argument 1
call Runner.getY 1
push argument 1
call Runner.getHeight 1
add
gt
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 0
return
label IF_FALSE1
push argument 1
call Runner.getX 1
push this 0
add
pop pointer 1
push that 0
return
function Obstacle.activate 0
push argument 0
pop pointer 0
push constant 0
pop this 1
push constant 0
return
function Obstacle.advance 0
push argument 0
pop pointer 0
push this 1
push constant 260
gt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
return
label IF_FALSE0
push this 1
push argument 1
add
pop this 1
push pointer 0
call Obstacle.ddraw 1
pop temp 0
push constant 0
return
function Obstacle.dclear 2
push argument 0
pop pointer 0
push this 1
push constant 255
gt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
return
label IF_FALSE0
push constant 0
pop local 0
push constant 16384
push this 1
push constant 1
sub
push constant 32
call Math.multiply 2
add
pop local 1
label WHILE_EXP0
push local 0
push constant 32
lt
not
if-goto WHILE_END0
push local 0
push this 0
add
pop pointer 1
push that 0
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push local 1
push local 0
add
push constant 0
call Memory.poke 2
pop temp 0
label IF_FALSE1
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Obstacle.clear 0
push argument 0
pop pointer 0
push this 1
push constant 255
gt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
return
label IF_FALSE0
push constant 0
call Screen.setColor 1
pop temp 0
push constant 0
push this 1
push constant 511
push this 1
call Screen.drawLine 4
pop temp 0
push constant 0
return
function Obstacle.ddraw 3
push argument 0
pop pointer 0
push this 1
push constant 255
gt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
return
label IF_FALSE0
push constant 0
pop local 0
push constant 16384
push this 1
push constant 32
call Math.multiply 2
add
pop local 1
push local 1
push constant 32
sub
pop local 2
label WHILE_EXP0
push local 0
push constant 32
lt
not
if-goto WHILE_END0
push local 0
push this 0
add
pop pointer 1
push that 0
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push local 1
push local 0
add
push constant 1
neg
call Memory.poke 2
pop temp 0
push local 2
push local 0
add
push constant 0
call Memory.poke 2
pop temp 0
label IF_FALSE1
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Obstacle.draw 1
push argument 0
pop pointer 0
push this 1
push constant 255
gt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
return
label IF_FALSE0
push constant 0
pop local 0
push constant 0
not
call Screen.setColor 1
pop temp 0
label WHILE_EXP0
push local 0
push constant 32
lt
not
if-goto WHILE_END0
push local 0
push this 0
add
pop pointer 1
push that 0
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push local 0
push constant 16
call Math.multiply 2
push this 1
push local 0
push constant 16
call Math.multiply 2
push constant 15
add
push this 1
call Screen.drawLine 4
pop temp 0
label IF_FALSE1
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
