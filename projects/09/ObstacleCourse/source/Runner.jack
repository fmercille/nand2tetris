class Runner {
  field int x, y;
  field int direction; // 0 = none, 1 = left, 2 = right

  constructor Runner new(int xPos, int yPos) {
    let x = xPos;
    let y = 255-32; // The runner is always at the bottom of the screen
    let direction = 0;
    do show();
    return this;
  }

	method void dispose() {
		do Memory.deAlloc(this);
		return;
	}

  method int getX() { return x; }
  method int getY() { return y; }
  method int getWidth() { return 16; }
  method int getHeight() { return 16; }

	method void move(int direction) { // 1 = left, 2 = right
		if (direction = 1) {
			if (x > 0) {
				let x = x - 1;
			}
		} else {
			if (x < 31) {
				let x = x + 1;
			}
		}
    return;
	}

  method void show() {
		do Runner.draw((y*32) + x);
    return;
  }

  method void hide() {
    do Runner.clear((y*32) + x);
    return;
  }

	function void draw(int location) {
    var int memAddress;
		let memAddress = 16384+location;
		do Memory.poke(memAddress+0, 0);
		do Memory.poke(memAddress+32, 960);
		do Memory.poke(memAddress+64, 1056);
		do Memory.poke(memAddress+96, 2064);
		do Memory.poke(memAddress+128, 2064);
		do Memory.poke(memAddress+160, 1056);
		do Memory.poke(memAddress+192, 960);
		do Memory.poke(memAddress+224, 384);
		do Memory.poke(memAddress+256, 6552);
		do Memory.poke(memAddress+288, 2016);
		do Memory.poke(memAddress+320, 384);
		do Memory.poke(memAddress+352, 384);
		do Memory.poke(memAddress+384, 576);
		do Memory.poke(memAddress+416, 1056);
		do Memory.poke(memAddress+448, 3120);
		do Memory.poke(memAddress+480, 2064);
		return;
	}

  function void clear(int location) {
    var int memAddress;
		let memAddress = 16384+location;
		do Memory.poke(memAddress+0, 0);
		do Memory.poke(memAddress+32, 0);
		do Memory.poke(memAddress+64, 0);
		do Memory.poke(memAddress+96, 0);
		do Memory.poke(memAddress+128, 0);
		do Memory.poke(memAddress+160, 0);
		do Memory.poke(memAddress+192, 0);
		do Memory.poke(memAddress+224, 0);
		do Memory.poke(memAddress+256, 0);
		do Memory.poke(memAddress+288, 0);
		do Memory.poke(memAddress+320, 0);
		do Memory.poke(memAddress+352, 0);
		do Memory.poke(memAddress+384, 0);
		do Memory.poke(memAddress+416, 0);
		do Memory.poke(memAddress+448, 0);
		do Memory.poke(memAddress+480, 0);
		return;
  }
}
